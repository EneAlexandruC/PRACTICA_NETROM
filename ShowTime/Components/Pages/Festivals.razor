@page "/festivals"
@rendermode InteractiveServer
@inject IBandService BandService
@inject IFestivalService FestivalService
@inject IBandFestivalService BandFestivalService

<h3>Festivals</h3>

<Button Color="Color.Secondary" Clicked="@ShowAddModal">Add A New Festival</Button>

<div class="mt-4">
    <Row>
        @foreach (var festival in festivals)
        {
            <Column ColumnSize="ColumnSize.Is3.OnDesktop.Is6.OnTablet.Is12.OnMobile" Class="mb-4">
                <Card Style="height: 100%;">
                    <CardHeader>
                        <CardTitle>@festival.Name</CardTitle>
                    </CardHeader>
                    <CardBody @onclick="() => ShowFestivalDetails(festival)" Style="cursor: pointer;">
                        <CardText>
                            <b>Location:</b> @festival.Location<br />
                            <b>Dates:</b> @festival.StartDate.ToShortDateString() - @festival.EndDate.ToShortDateString()<br />
                            <b>Bands:</b> @(festival.Bands?.Count ?? 0)
                        </CardText>
                    </CardBody>
                    <CardFooter>
                        <ButtonGroup>
                            <Button Color="Color.Primary" Clicked="@(() => ShowFestivalDetails(festival))" Size="Size.Small">View Bands</Button>
                            <Button Color="Color.Secondary" Clicked="@(() => ShowEditModal(festival))" Size="Size.Small">Edit</Button>
                            <Button Color="Color.Danger" Clicked="@(() => ShowDeleteConfirmation(festival))" Size="Size.Small">Delete</Button>
                        </ButtonGroup>
                    </CardFooter>
                </Card>
            </Column>
        }
    </Row>
</div>

<!-- Band Details Modal -->
<Modal @ref="bandDetailsModalRef">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Bands at @selectedFestival?.Name</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (selectedFestival?.Bands != null && selectedFestival.Bands.Any())
            {
                <div class="festival-bands">
                    <Row>
                        @foreach (var band in selectedFestival.Bands)
                        {
                            <Column ColumnSize="ColumnSize.Is4.OnDesktop.Is6.OnTablet.Is12.OnMobile" Class="mb-3">
                                <Card>
                                    <CardBody>
                                        <CardTitle>@band.Name</CardTitle>
                                        <CardText>
                                            <Badge Color="Color.Info">@band.Genre</Badge>
                                        </CardText>
                                    </CardBody>
                                </Card>
                            </Column>
                        }
                    </Row>
                </div>
            }
            else
            {
                <Alert Color="Color.Warning">No bands are performing at this festival yet.</Alert>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideBandDetailsModal">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Add Festival Modal -->
<Modal @ref="addFestivalModalRef">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Add Festival</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="validationsRef" Model="@festivalModel" ValidateOnLoad="false">
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Name</FieldLabel>
                        <TextEdit @bind-Text="FestivalName" Placeholder="Enter festival name..." />
                    </Field>
                </Validation>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Location</FieldLabel>
                        <TextEdit @bind-Text="FestivalLocation" Placeholder="Enter location..." />
                    </Field>
                </Validation>
                <Validation Validator="@ValidateStartDate">
                    <Field>
                        <FieldLabel>Start Date</FieldLabel>
                        <DateEdit @bind-Date="FestivalStartDate" />
                    </Field>
                </Validation>
                <Validation Validator="@ValidateEndDate">
                    <Field>
                        <FieldLabel>End Date</FieldLabel>
                        <DateEdit @bind-Date="FestivalEndDate" />
                    </Field>
                </Validation>
                <div class="transferlist-modal-relative">
                    <TransferList TItem="Band"
                                  Items="@bands"
                                  SelectionMode="ListGroupSelectionMode.Multiple"
                                  Mode="ListGroupMode.Selectable"
                                  Scrollable="true"
                                  ShowMoveAll="false"
                                  ValueField="item => item.Id.ToString()"
                                  TextField="item => item.Name"
                                  @bind-ItemsStart="@bands"
                                  @bind-ItemsEnd="@SelectedBands">
                    </TransferList>
                </div>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideAddModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@SaveFestival" Disabled="@isSaveDisabled">Save</Button>
            @code {
                private bool isSaveDisabled => !validationsRef?.ValidateAll().Result ?? true;
            }
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Edit Festival Modal -->
<Modal @ref="editFestivalModalRef">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Edit Festival</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="editValidationsRef" Model="@festivalModel" ValidateOnLoad="false">
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Name</FieldLabel>
                        <TextEdit @bind-Text="selectedFestival.Name" Placeholder="Enter festival name..." />
                    </Field>
                </Validation>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Location</FieldLabel>
                        <TextEdit @bind-Text="selectedFestival.Location" Placeholder="Enter location..." />
                    </Field>
                </Validation>
                <Validation Validator="@ValidateStartDate">
                    <Field>
                        <FieldLabel>Start Date</FieldLabel>
                        <DateEdit @bind-Date="selectedFestival.StartDate" />
                    </Field>
                </Validation>
                <Validation Validator="@ValidateEndDate">
                    <Field>
                        <FieldLabel>End Date</FieldLabel>
                        <DateEdit @bind-Date="selectedFestival.EndDate" />
                    </Field>
                </Validation>
                <div class="transferlist-modal-relative">
                    <TransferList TItem="Band"
                                  Items="@bands"
                                  SelectionMode="ListGroupSelectionMode.Multiple"
                                  Mode="ListGroupMode.Selectable"
                                  Scrollable="true"
                                  ShowMoveAll="false"
                                  ValueField="item => item.Id.ToString()"
                                  TextField="item => item.Name"
                                  @bind-ItemsStart="@editBands"
                                  @bind-ItemsEnd="@SelectedBands">
                    </TransferList>
                </div>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideEditModal">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@UpdateFestival" Disabled="@isEditSaveDisabled">Update</Button>
            @code {
                private bool isEditSaveDisabled => !editValidationsRef?.ValidateAll().Result ?? true;
            }
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Delete Confirmation Modal -->
<Modal @ref="deleteModalRef">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Confirm Delete</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <p>Are you sure you want to delete the festival "<strong>@selectedFestival?.Name</strong>"?</p>
            <p>This action cannot be undone.</p>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideDeleteModal">Cancel</Button>
            <Button Color="Color.Danger" Clicked="@DeleteFestival">Delete</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Snackbar @ref="snackbar">
    <SnackbarBody>
        @if (string.IsNullOrWhiteSpace(errorMessage)){
            @successMessage
        }
        else
        {
            @errorMessage
        }
    </SnackbarBody>
</Snackbar>

@code {
    private List<Festival> festivals = new List<Festival>();
    private List<Band> bands = new List<Band>();
    private List<Band> editBands = new List<Band>();
    private Modal addFestivalModalRef = new();
    private Modal editFestivalModalRef = new();
    private Modal bandDetailsModalRef = new();
    private Modal deleteModalRef = new();
    private Validations validationsRef;
    private Validations editValidationsRef;
    private Festival selectedFestival = new Festival();
    private int editFestivalId;

    // Model for validation
    private Festival festivalModel = new Festival();

    // Festival attributes
    public string FestivalName { get; set; } = string.Empty;
    public string FestivalLocation { get; set; } = string.Empty;
    public DateTime FestivalStartDate { get; set; } = DateTime.Now;
    public DateTime FestivalEndDate { get; set; } = DateTime.Now;
    public List<int> SelectedBandIds { get; set; } = new List<int>();
    public List<Band> SelectedBands { get; set; } = new List<Band>();
    public Snackbar snackbar;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    void ValidateStartDate(ValidatorEventArgs e)
    {
        var startDate = Convert.ToDateTime(e.Value);

        if (startDate < DateTime.Now)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Start date must be in the future";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    void ValidateEndDate(ValidatorEventArgs e)
    {
        var endDate = Convert.ToDateTime(e.Value);

        if (endDate < FestivalStartDate)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "End date must be after start date";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    void ValidateBands(ValidatorEventArgs e)
    {
        if (SelectedBandIds == null || SelectedBandIds.Count == 0)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Please select at least one band";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    private async Task ShowAddModal()
    {
        // Reset form values
        FestivalName = string.Empty;
        FestivalLocation = string.Empty;
        FestivalStartDate = DateTime.Now;
        FestivalEndDate = DateTime.Now;
        SelectedBands = new List<Band>();
        bands = (await BandService.GetAllAsync()).ToList();

        // Reset validations
        if (validationsRef != null)
        {
            await validationsRef.ClearAll();
        }

        await addFestivalModalRef.Show();
    }

    private async Task ShowEditModal(Festival festival)
    {
        selectedFestival = festival;
        editFestivalId = festival.Id;

        // Populate form with festival data
        FestivalName = festival.Name;
        FestivalLocation = festival.Location;
        FestivalStartDate = festival.StartDate;
        FestivalEndDate = festival.EndDate;

        // Get all bands
        bands = (await BandService.GetAllAsync()).ToList();

        // Prepare bands for transfer list
        if (festival.Bands != null && festival.Bands.Any())
        {
            // Get festival with all bands if needed
            if (festival.Bands.Count == 0)
            {
                var fullFestival = await FestivalService.GetByIdAsync(festival.Id);
                if (fullFestival != null && fullFestival.Bands != null)
                {
                    selectedFestival = fullFestival;
                }
            }

            // Set selected bands
            SelectedBands = selectedFestival.Bands.ToList();

            // Create a copy of bands without the selected ones
            editBands = bands.Where(b => !SelectedBands.Any(sb => sb.Id == b.Id)).ToList();
        }
        else
        {
            SelectedBands = new List<Band>();
            editBands = bands.ToList();
        }

        // Reset validations
        if (editValidationsRef != null)
        {
            await editValidationsRef.ClearAll();
        }

        await editFestivalModalRef.Show();
    }

    private Task HideAddModal()
    {
        return addFestivalModalRef.Hide();
    }

    private Task HideEditModal()
    {
        return editFestivalModalRef.Hide();
    }

    private Task HideBandDetailsModal()
    {
        return bandDetailsModalRef.Hide();
    }

    private Task HideDeleteModal()
    {
        return deleteModalRef.Hide();
    }

    private async Task ShowFestivalDetails(Festival festival)
    {
        selectedFestival = festival;

        // If bands aren't loaded for this festival, load them
        if (selectedFestival.Bands == null || !selectedFestival.Bands.Any())
        {
            // Assuming there's a method to get a festival with its bands
            var fullFestival = await FestivalService.GetByIdAsync(selectedFestival.Id);
            if (fullFestival != null)
            {
                selectedFestival = fullFestival;
            }
        }

        await bandDetailsModalRef.Show();
    }

    private async Task ShowDeleteConfirmation(Festival festival)
    {
        selectedFestival = festival;
        await deleteModalRef.Show();
    }

    public async Task SaveFestival()
    {
        try
        {
            if (await validationsRef.ValidateAll())
            {
                Festival newFestival = new Festival
                {
                    Name = FestivalName,
                    Location = FestivalLocation,
                    StartDate = FestivalStartDate,
                    EndDate = FestivalEndDate,
                    Bands = bands.Where(b => SelectedBandIds.Contains(b.Id)).ToList()
                };

                await FestivalService.AddAsync(newFestival);

                var createdFestival = (await FestivalService.GetAllAsync())
                    .FirstOrDefault(f => f.Name == FestivalName && f.Location == FestivalLocation);

                int festivalId = createdFestival?.Id ?? 0;

                await BandFestivalService.AddBands(festivalId, SelectedBands.Select(b => b.Id).ToList());

                // Refresh festivals list
                festivals = (await FestivalService.GetAllAsync()).ToList();

                await HideAddModal();
                successMessage = $"Festival {FestivalName} located in {FestivalLocation} has been added successfully!";
                snackbar.Show();
                FestivalName = string.Empty;
                FestivalLocation = string.Empty;
                FestivalStartDate = DateTime.Now;
                FestivalEndDate = DateTime.Now;
                SelectedBandIds = new List<int>();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding festival: {ex.Message}");
        }
    }

    public async Task UpdateFestival()
    {
        try
        {
            if (await editValidationsRef.ValidateAll())
            {

                await FestivalService.UpdateAsync(selectedFestival);

                // Update bands for this festival
                await FestivalService.UpdateFestivalBandsAsync(selectedFestival.Id, SelectedBands.Select(b => b.Id).ToList());

                // Refresh festivals list
                festivals = (await FestivalService.GetAllAsync()).ToList();

                await HideEditModal();
                successMessage = $"Festival {FestivalName} has been updated successfully!";
                snackbar.Show();
                selectedFestival = new Festival();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating festival: {ex.Message}");
            errorMessage = "Error updating festival";
            snackbar.Show();
        }
    }
    
    public async Task DeleteFestival()
    {
        try
        {
            if (selectedFestival != null)
            {
                await FestivalService.DeleteAsync(selectedFestival);
                
                // Refresh festivals list
                festivals = (await FestivalService.GetAllAsync()).ToList();
                
                await HideDeleteModal();
                successMessage = $"Festival {selectedFestival.Name} has been deleted successfully!";
                snackbar.Show();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting festival: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            festivals = (await BandFestivalService.GetAllFestivalWithBandsInOrderAsync()).ToList();
            bands = (await BandService.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}