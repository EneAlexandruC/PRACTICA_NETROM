@page "/festivals"
@rendermode InteractiveServer
@inject IBandService BandService
@inject IFestivalService FestivalService
@inject IBandFestivalService BandFestivalService
@inject IBookingService BookingService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="page-header fade-in">
    <h1><i class="fas fa-calendar-alt me-3"></i>Festivals</h1>
    <p>Discover amazing music festivals happening around the world</p>
</div>

<div class="mb-4">
    <Button Color="Color.Primary" Clicked="@ShowAddModal" Class="btn-lg">
        <i class="fas fa-plus me-2"></i>Add A New Festival
    </Button>
</div>

<div class="mt-4">
    <Row>
        @foreach (var festival in festivals)
        {
            <Column ColumnSize="ColumnSize.Is4.OnDesktop.Is6.OnTablet.Is12.OnMobile" Class="mb-4 d-flex">
                <Card Style="height: 100%;" Class="festival-card fade-in flex-fill">
                    @if (!string.IsNullOrEmpty(festival.ImageUrl))
                    {
                        <div class="card-img-wrapper">
                            <img src="@festival.ImageUrl" class="card-img-top festival-image" alt="@festival.Name" onerror="this.src='/images/default-festival.jpg'">
                            <div class="card-img-overlay d-flex align-items-end">
                                <h5 class="card-title text-white fw-bold shadow-text">@festival.Name</h5>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="card-img-top festival-placeholder d-flex align-items-center justify-content-center">
                            <div class="text-center">
                                <i class="fas fa-calendar-alt fa-3x text-muted mb-2"></i>
                                <h5 class="text-muted">@festival.Name</h5>
                            </div>
                        </div>
                    }
                    
                    <CardBody @onclick="() => ShowFestivalDetails(festival)" Style="cursor: pointer;">
                        <div class="mb-3">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-map-marker-alt text-primary me-2"></i>
                                <span class="fw-semibold">@festival.Location</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-calendar text-primary me-2"></i>
                                <span>@festival.StartDate.ToShortDateString() - @festival.EndDate.ToShortDateString()</span>
                            </div>
                            <div class="d-flex align-items-center">
                                <i class="fas fa-users text-primary me-2"></i>
                                <span>@(festival.Bands?.Count ?? 0) Band(s)</span>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(festival.Description))
                        {
                            <p class="card-text text-muted">@festival.Description</p>
                        }
                    </CardBody>
                    <CardFooter>
                        <div class="d-flex flex-column gap-2">
                            <div class="d-flex gap-2">
                                <Button Color="Color.Primary" Clicked="@(() => ShowFestivalDetails(festival))" Size="Size.Small" Class="flex-fill">
                                    <i class="fas fa-eye me-1"></i>View Bands
                                </Button>
                                <Button Color="Color.Secondary" Clicked="@(() => ShowEditModal(festival))" Size="Size.Small" Class="flex-fill">
                                    <i class="fas fa-edit me-1"></i>Edit
                                </Button>
                                <Button Color="Color.Danger" Clicked="@(() => ShowDeleteConfirmation(festival))" Size="Size.Small" Class="flex-fill">
                                    <i class="fas fa-trash me-1"></i>Delete
                                </Button>
                            </div>
                            <Button Color="Color.Success" Clicked="@(() => BookFestival(festival))" Size="Size.Small" Class="w-100">
                                <i class="fas fa-ticket-alt me-1"></i>Book Festival
                            </Button>
                        </div>
                    </CardFooter>
                </Card>
            </Column>
        }
    </Row>
</div>

<!-- Band Details Modal -->
<Modal @ref="bandDetailsModalRef">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Bands at @selectedFestival?.Name</ModalTitle>
            <CloseButton TextColor="TextColor.White"/>
        </ModalHeader>
        <ModalBody>
            @if (selectedFestival?.Bands != null && selectedFestival.Bands.Any())
            {
                <div class="festival-bands">
                    <Row>
                        @foreach (var band in selectedFestival.Bands)
                        {
                            <Column ColumnSize="ColumnSize.Is4.OnDesktop.Is6.OnTablet.Is12.OnMobile" Class="mb-3 d-flex">
                                <Card Style="height: 100%;" Class="flex-fill">
                                    <CardBody Class="d-flex flex-column">
                                        <CardTitle>@band.Name</CardTitle>
                                        <div class="flex-grow-1">
                                            <CardImage Src="@band.ImageUrl" Alt="@band.Name" Class="img-fluid mb-3" onerror="this.src='/images/default-band.jpg'" />
                                        </div>
                                        <CardText Class="mt-auto">
                                            <Badge Color="Color.Info">@band.Genre</Badge>
                                        </CardText>
                                    </CardBody>
                                </Card>
                            </Column>
                        }
                    </Row>
                </div>
            }
            else
            {
                <Alert Color="Color.Warning">No bands are performing at this festival yet.</Alert>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideBandDetailsModal">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Add Festival Modal -->
<Modal @ref="addFestivalModalRef">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Add Festival</ModalTitle>
            <CloseButton TextColor="TextColor.White"/>
        </ModalHeader>
        <ModalBody>
            <Validations @ref="validationsRef" Model="@festivalModel" ValidateOnLoad="false">
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Name</FieldLabel>
                        <TextEdit @bind-Text="FestivalName" Placeholder="Enter festival name..." />
                    </Field>
                </Validation>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Location</FieldLabel>
                        <TextEdit @bind-Text="FestivalLocation" Placeholder="Enter location..." />
                    </Field>
                </Validation>
                <Validation Validator="@ValidateStartDate">
                    <Field>
                        <FieldLabel>Start Date</FieldLabel>
                        <DateEdit @bind-Date="FestivalStartDate" />
                    </Field>
                </Validation>
                <Validation Validator="@ValidateEndDate">
                    <Field>
                        <FieldLabel>End Date</FieldLabel>
                        <DateEdit @bind-Date="FestivalEndDate" />
                    </Field>
                </Validation>
                <Field>
                    <FieldLabel>
                        <i class="fas fa-image me-2 text-primary"></i>Image URL
                    </FieldLabel>
                    <TextEdit @bind-Text="FestivalImageUrl" Placeholder="https://example.com/festival-image.jpg" />
                    <FieldHelp>Provide a URL to an image representing the festival (optional)</FieldHelp>
                </Field>
                <Field>
                    <FieldLabel>
                        <i class="fas fa-align-left me-2 text-primary"></i>Description
                    </FieldLabel>
                    <MemoEdit @bind-Text="FestivalDescription" Placeholder="Describe the festival..." Rows="4" />
                    <FieldHelp>A brief description of the festival (optional)</FieldHelp>
                </Field>
                
                @if (!string.IsNullOrEmpty(FestivalImageUrl))
                {
                    <Field>
                        <FieldLabel>Image Preview:</FieldLabel>
                        <div class="text-center">
                            <img src="@FestivalImageUrl" alt="Festival preview" class="preview-image img-thumbnail" onerror="this.style.display='none'">
                        </div>
                    </Field>
                }
                
                <Field>
                    <FieldLabel>
                        <i class="fas fa-users me-2 text-primary"></i>Select Bands
                    </FieldLabel>
                    <FieldHelp>Choose which bands will perform at this festival</FieldHelp>
                </Field>
                <div class="transferlist-modal-relative">
                    <TransferList TItem="Band"
                                  Items="@bands"
                                  SelectionMode="ListGroupSelectionMode.Multiple"
                                  Mode="ListGroupMode.Selectable"
                                  Scrollable="true"
                                  ShowMoveAll="false"
                                  ValueField="item => item.Id.ToString()"
                                  TextField="item => item.Name"
                                  @bind-ItemsStart="@bands"
                                  @bind-ItemsEnd="@SelectedBands">
                    </TransferList>
                </div>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideAddModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@SaveFestival" Disabled="@isSaveDisabled">Save</Button>
            @code {
                private bool isSaveDisabled => !validationsRef?.ValidateAll().Result ?? true;
            }
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Edit Festival Modal -->
<Modal @ref="editFestivalModalRef">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Edit Festival</ModalTitle>
            <CloseButton TextColor="TextColor.White"/>
        </ModalHeader>
        <ModalBody>
            <Validations @ref="editValidationsRef" Model="@festivalModel" ValidateOnLoad="false">
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Name</FieldLabel>
                        <TextEdit @bind-Text="selectedFestival.Name" Placeholder="Enter festival name..." />
                    </Field>
                </Validation>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Location</FieldLabel>
                        <TextEdit @bind-Text="selectedFestival.Location" Placeholder="Enter location..." />
                    </Field>
                </Validation>
                <Validation Validator="@ValidateStartDate">
                    <Field>
                        <FieldLabel>Start Date</FieldLabel>
                        <DateEdit @bind-Date="selectedFestival.StartDate" />
                    </Field>
                </Validation>
                <Validation Validator="@ValidateEndDate">
                    <Field>
                        <FieldLabel>End Date</FieldLabel>
                        <DateEdit @bind-Date="selectedFestival.EndDate" />
                    </Field>
                </Validation>
                <Field>
                    <FieldLabel>
                        <i class="fas fa-image me-2 text-primary"></i>Image URL
                    </FieldLabel>
                    <TextEdit @bind-Text="selectedFestival.ImageUrl" Placeholder="https://example.com/festival-image.jpg" />
                    <FieldHelp>Provide a URL to an image representing the festival (optional)</FieldHelp>
                </Field>
                <Field>
                    <FieldLabel>
                        <i class="fas fa-align-left me-2 text-primary"></i>Description
                    </FieldLabel>
                    <MemoEdit @bind-Text="selectedFestival.Description" Placeholder="Describe the festival..." Rows="4" />
                    <FieldHelp>A brief description of the festival (optional)</FieldHelp>
                </Field>
                
                @if (!string.IsNullOrEmpty(selectedFestival.ImageUrl))
                {
                    <Field>
                        <FieldLabel>Image Preview:</FieldLabel>
                        <div class="text-center">
                            <img src="@selectedFestival.ImageUrl" alt="Festival preview" class="preview-image img-thumbnail" onerror="this.style.display='none'">
                        </div>
                    </Field>
                }
                
                <Field>
                    <FieldLabel>
                        <i class="fas fa-users me-2 text-primary"></i>Select Bands
                    </FieldLabel>
                    <FieldHelp>Choose which bands will perform at this festival</FieldHelp>
                </Field>
                <div class="transferlist-modal-relative">
                    <TransferList TItem="Band"
                                  Items="@bands"
                                  SelectionMode="ListGroupSelectionMode.Multiple"
                                  Mode="ListGroupMode.Selectable"
                                  Scrollable="true"
                                  ShowMoveAll="false"
                                  ValueField="item => item.Id.ToString()"
                                  TextField="item => item.Name"
                                  @bind-ItemsStart="@editBands"
                                  @bind-ItemsEnd="@SelectedBands">
                    </TransferList>
                </div>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideEditModal">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@UpdateFestival" Disabled="@isEditSaveDisabled">Update</Button>
            @code {
                private bool isEditSaveDisabled => !editValidationsRef?.ValidateAll().Result ?? true;
            }
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Delete Confirmation Modal -->
<Modal @ref="deleteModalRef">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Confirm Delete</ModalTitle>
            <CloseButton TextColor="TextColor.White"/>
        </ModalHeader>
        <ModalBody>
            <p>Are you sure you want to delete the festival "<strong>@selectedFestival?.Name</strong>"?</p>
            <p>This action cannot be undone.</p>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideDeleteModal">Cancel</Button>
            <Button Color="Color.Danger" Clicked="@DeleteFestival">Delete</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Snackbar @ref="snackbar">
    <SnackbarBody>
        @if (string.IsNullOrWhiteSpace(errorMessage)){
            @successMessage
        }
        else
        {
            @errorMessage
        }
    </SnackbarBody>
</Snackbar>

<style>
    .festival-card {
        transition: all 0.3s ease;
        overflow: hidden;
    }
    
    .festival-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
    }
    
    .card-img-wrapper {
        position: relative;
        overflow: hidden;
    }
    
    .festival-image {
        height: 250px;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    
    .festival-card:hover .festival-image {
        transform: scale(1.1);
    }
    
    .festival-placeholder {
        height: 250px;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    }
    
    .card-img-overlay {
        background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
    }
    
    .shadow-text {
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
    }
    
    .preview-image {
        max-width: 300px;
        max-height: 200px;
        object-fit: cover;
        border-radius: 0.75rem;
    }
    
    .transferlist-modal-relative {
        max-height: 400px;
        overflow-y: auto;
    }

    .page-header p {
        font-size: 2rem;
        color: black;
    }
</style>

@code {
    private List<Festival> festivals = new List<Festival>();
    private List<Band> bands = new List<Band>();
    private List<Band> editBands = new List<Band>();
    private Modal addFestivalModalRef = new();
    private Modal editFestivalModalRef = new();
    private Modal bandDetailsModalRef = new();
    private Modal deleteModalRef = new();
    private Validations validationsRef = default!;
    private Validations editValidationsRef = default!;
    private Festival selectedFestival = new Festival();
    private int editFestivalId;
    private ApplicationUser? currentUser;

    // Model for validation
    private Festival festivalModel = new Festival();

    // Festival attributes
    public string FestivalName { get; set; } = string.Empty;
    public string FestivalLocation { get; set; } = string.Empty;
    public string FestivalImageUrl { get; set; } = string.Empty;
    public string FestivalDescription { get; set; } = string.Empty;
    public DateTime FestivalStartDate { get; set; } = DateTime.Now;
    public DateTime FestivalEndDate { get; set; } = DateTime.Now;
    public List<int> SelectedBandIds { get; set; } = new List<int>();
    public List<Band> SelectedBands { get; set; } = new List<Band>();
    public Snackbar snackbar = default!;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    void ValidateStartDate(ValidatorEventArgs e)
    {
        var startDate = Convert.ToDateTime(e.Value);

        if (startDate < DateTime.Now)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Start date must be in the future";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    void ValidateEndDate(ValidatorEventArgs e)
    {
        var endDate = Convert.ToDateTime(e.Value);

        if (endDate < FestivalStartDate)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "End date must be after start date";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    void ValidateBands(ValidatorEventArgs e)
    {
        if (SelectedBandIds == null || SelectedBandIds.Count == 0)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Please select at least one band";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }

    private async Task ShowAddModal()
    {
        // Reset form values
        FestivalName = string.Empty;
        FestivalLocation = string.Empty;
        FestivalImageUrl = string.Empty;
        FestivalDescription = string.Empty;
        FestivalStartDate = DateTime.Now;
        FestivalEndDate = DateTime.Now;
        SelectedBands = new List<Band>();
        bands = (await BandService.GetAllAsync()).ToList();

        // Reset validations
        if (validationsRef != null)
        {
            await validationsRef.ClearAll();
        }

        await addFestivalModalRef.Show();
    }

    private async Task ShowEditModal(Festival festival)
    {
        selectedFestival = festival;
        editFestivalId = festival.Id;

        // Populate form with festival data
        FestivalName = festival.Name;
        FestivalLocation = festival.Location;
        FestivalStartDate = festival.StartDate;
        FestivalEndDate = festival.EndDate;

        // Get all bands
        bands = (await BandService.GetAllAsync()).ToList();

        // Prepare bands for transfer list
        if (festival.Bands != null && festival.Bands.Any())
        {
            // Get festival with all bands if needed
            if (festival.Bands.Count == 0)
            {
                var fullFestival = await FestivalService.GetByIdAsync(festival.Id);
                if (fullFestival != null && fullFestival.Bands != null)
                {
                    selectedFestival = fullFestival;
                }
            }

            // Set selected bands
            SelectedBands = selectedFestival.Bands.ToList();

            // Create a copy of bands without the selected ones
            editBands = bands.Where(b => !SelectedBands.Any(sb => sb.Id == b.Id)).ToList();
        }
        else
        {
            SelectedBands = new List<Band>();
            editBands = bands.ToList();
        }

        // Reset validations
        if (editValidationsRef != null)
        {
            await editValidationsRef.ClearAll();
        }

        await editFestivalModalRef.Show();
    }

    private Task HideAddModal()
    {
        return addFestivalModalRef.Hide();
    }

    private Task HideEditModal()
    {
        return editFestivalModalRef.Hide();
    }

    private Task HideBandDetailsModal()
    {
        return bandDetailsModalRef.Hide();
    }

    private Task HideDeleteModal()
    {
        return deleteModalRef.Hide();
    }

    private async Task ShowFestivalDetails(Festival festival)
    {
        selectedFestival = festival;

        // If bands aren't loaded for this festival, load them
        if (selectedFestival.Bands == null || !selectedFestival.Bands.Any())
        {
            // Assuming there's a method to get a festival with its bands
            var fullFestival = await FestivalService.GetByIdAsync(selectedFestival.Id);
            if (fullFestival != null)
            {
                selectedFestival = fullFestival;
            }
        }

        await bandDetailsModalRef.Show();
    }

    private async Task ShowDeleteConfirmation(Festival festival)
    {
        selectedFestival = festival;
        await deleteModalRef.Show();
    }

    public async Task SaveFestival()
    {
        try
        {
            if (await validationsRef.ValidateAll())
            {
                Festival newFestival = new Festival
                {
                    Name = FestivalName,
                    Location = FestivalLocation,
                    StartDate = FestivalStartDate,
                    EndDate = FestivalEndDate,
                    ImageUrl = FestivalImageUrl,
                    Description = FestivalDescription,
                    Bands = bands.Where(b => SelectedBandIds.Contains(b.Id)).ToList()
                };

                await FestivalService.AddAsync(newFestival);

                var createdFestival = (await FestivalService.GetAllAsync())
                    .FirstOrDefault(f => f.Name == FestivalName && f.Location == FestivalLocation);

                int festivalId = createdFestival?.Id ?? 0;

                await BandFestivalService.AddBandsToFestivalAsync(festivalId, SelectedBands.Select(b => b.Id).ToList(), SelectedBands.Select((band, index) => index + 1).ToList());

                // Refresh festivals list
                festivals = (await FestivalService.GetAllAsync()).ToList();

                await HideAddModal();
                successMessage = $"Festival {FestivalName} located in {FestivalLocation} has been added successfully!";
                await snackbar.Show();
                FestivalName = string.Empty;
                FestivalLocation = string.Empty;
                FestivalImageUrl = string.Empty;
                FestivalDescription = string.Empty;
                FestivalStartDate = DateTime.Now;
                FestivalEndDate = DateTime.Now;
                SelectedBandIds = new List<int>();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding festival: {ex.Message}");
        }
    }

    public async Task UpdateFestival()
    {
        try
        {
            if (await editValidationsRef.ValidateAll())
            {

                await FestivalService.UpdateAsync(selectedFestival);

                // Update bands for this festival
                await FestivalService.UpdateFestivalBandsAsync(selectedFestival.Id, SelectedBands.Select(b => b.Id).ToList());

                // Refresh festivals list
                festivals = (await FestivalService.GetAllAsync()).ToList();

                await HideEditModal();
                successMessage = $"Festival {FestivalName} has been updated successfully!";
                await snackbar.Show();
                selectedFestival = new Festival();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating festival: {ex.Message}");
            errorMessage = "Error updating festival";
            await snackbar.Show();
        }
    }
    
    public async Task DeleteFestival()
    {
        try
        {
            if (selectedFestival != null)
            {
                await FestivalService.DeleteAsync(selectedFestival);
                
                // Refresh festivals list
                festivals = (await FestivalService.GetAllAsync()).ToList();
                
                await HideDeleteModal();
                successMessage = $"Festival {selectedFestival.Name} has been deleted successfully!";
                await snackbar.Show();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting festival: {ex.Message}");
        }
    }

    private async Task BookFestival(Festival festival)
    {
        try
        {
            if (currentUser == null)
            {
                errorMessage = "Please login to book festivals";
                await snackbar.Show();
                return;
            }

            // Check if user has already booked this festival
            var alreadyBooked = await BookingService.HasUserBookedFestivalAsync(currentUser.Id, festival.Id);
            if (alreadyBooked)
            {
                errorMessage = "You have already booked this festival";
                await snackbar.Show();
                return;
            }

            // Create booking
            await BookingService.CreateBookingAsync(currentUser.Id, festival.Id);
            successMessage = $"Successfully booked {festival.Name}! Check your bookings to complete the purchase.";
            await snackbar.Show();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error booking festival: {ex.Message}";
            await snackbar.Show();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                var userIdClaim = authState.User.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier");
                if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
                {
                    // Create a minimal user object for booking purposes
                    currentUser = new ApplicationUser { Id = userId };
                }
            }

            festivals = (await BandFestivalService.GetAllFestivalWithBandsInOrderAsync()).ToList();
            bands = (await BandService.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }
}