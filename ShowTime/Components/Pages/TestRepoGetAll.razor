@page "/TestRepoGetAll"
@rendermode InteractiveServer
@inject IBandService BandService  

<h1>Add A Band:</h1>
<input @bind="newBandName" placeholder="Enter band name" />
<select @bind="newBandGenre">
    @foreach (Genre genre in Enum.GetValues(typeof(Genre)))
    {
        <option value="@genre">@genre</option>
    }
</select>
<button @onclick="AddBandAsync">Add Band</button>

<h1>Detele Band:</h1>
<input @bind="Id" placeholder="Enter id of band to delete" />
<button @onclick="DeleteBandAsync">Delete Band</button>

<h1>Update Band:</h1>
<input @bind="Id" placeholder="Enter id of band to update" />
<input @bind="newBandName" placeholder="Enter new band name" />
<select @bind="newBandGenre">
    @foreach (Genre genre in Enum.GetValues(typeof(Genre)))
    {
        <option value="@genre">@genre</option>
    }
</select>
<button @onclick="UpdateBandAsync">Update Band</button>


<h1>Band List:</h1>
<table class="table">  
    <thead>  
        <tr>  
            <th>Id</th>  
            <th>Name</th>  
            <th>Genre</th>  
        </tr>  
    </thead>  
    <tbody>  
        @foreach (var band in Bands)  
        {  
            <tr>  
                <td>@band.Id</td>  
                <td>@band.Name</td>  
                <td>@band.Genre</td>  
            </tr>  
        }  
    </tbody>  
</table>  

@code {
    public List<Band> Bands { get; set; } = new List<Band>();  

    public string newBandName { get; set; } = string.Empty;  
    public Genre newBandGenre { get; set; } = Genre.Rock;

    public int Id { get; set; } = 0;

    public async Task UpdateBandAsync()  
    {  
        try  
        {  
            if (Id > 0 && !string.IsNullOrWhiteSpace(newBandName))  
            {  
                Band? entity = await BandService.GetByIdAsync(Id);  
                if (entity != null)  
                {  
                    entity.Name = newBandName;  
                    entity.Genre = newBandGenre;  
                    await BandService.UpdateAsync(entity);  
                    Bands = (await BandService.GetAllAsync()).ToList();  
                    Id = 0;  
                    newBandName = string.Empty;  
                    newBandGenre = Genre.Rock;
                    StateHasChanged();  
                }  
            }  
        }  
        catch (Exception ex)  
        {  
            Console.WriteLine($"Error updating band: {ex.Message}");  
        }  
    }

    public async Task DeleteBandAsync()  
    {  
        try  
        {  
            if (Id > 0)  
            {
                Band? entity = await BandService.GetByIdAsync(Id);
                await BandService.DeleteAsync(entity!);  
                Bands = (await BandService.GetAllAsync()).ToList();  
                Id = 0;  
                StateHasChanged();  
            }  
        }  
        catch (Exception ex)  
        {  
            Console.WriteLine($"Error deleting band: {ex.Message}");  
        }  
    }

    public async Task AddBandAsync()  
    {  
        try  
        {  
            if (!string.IsNullOrWhiteSpace(newBandName))
            {
                var band = new Band { Name = newBandName, Genre = newBandGenre };  
                await BandService.AddAsync(band);  
                Bands = (await BandService.GetAllAsync()).ToList();  
                newBandName = string.Empty;  
                newBandGenre = Genre.Rock;
                StateHasChanged();
            }
        }  
        catch (Exception ex)  
        {  
            Console.WriteLine($"Error adding band: {ex.Message}");  
        }  
    }  

    protected override async Task OnInitializedAsync()  
    {  
        try  
        {  
            Bands = (await BandService.GetAllAsync()).ToList();  
        }  
        catch (Exception ex)  
        {  
            Console.WriteLine($"Error fetching bands: {ex.Message}");  
        }  
    }  
}
