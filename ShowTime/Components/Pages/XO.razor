@page "/xo"
@rendermode InteractiveServer

<h3>Tabla de joc</h3>

<table class="xo-table">
    <tbody>
        @for (int i = 0; i < 3; i++)
        {
            <tr>
                @for (int j = 0; j < 3; j++)
                {
                    <td>
                        <button class="cell" @onclick="() => MakeMove(i - 1, j - 1)">
                            @gameBoard[i][j]
                        </button>
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@if (gameOver)
{
    <p>@(winner == "Draw" ? "Remiză!" : $"A câștigat jucătorul {winner}!")</p>
}

<style>
    .xo-table {
        border-collapse: collapse;
        margin-bottom: 1em;
    }
    .xo-table td {
        border: 1px solid #888;
        padding: 0;
        width: 60px;
        height: 60px;
        text-align: center;
    }
    .cell {
        width: 100%;
        height: 100%;
        font-size: 2em;
        background: #f9f9f9;
        border: none;
        cursor: pointer;
    }
    .cell:disabled {
        background: #eee;
        cursor: not-allowed;
    }
</style>

@code {
    private string[][] gameBoard =
    {
        new string[] { "X", "", "" },
        new string[] { "", "O", "" },
        new string[] { "", "", "X" }
    };

    private string[] moves = new[] { "", "X", "O" };
    private int currentPlayer = 1;
    private bool gameOver = false;
    private string winner = string.Empty;

    private void MakeMove(int row, int col)
    {
        if (gameOver || !string.IsNullOrEmpty(gameBoard[row][col]))
            return;

        gameBoard[row][col] = moves[currentPlayer];
        CheckForWinner();
        if (!gameOver)
        {
            currentPlayer = currentPlayer == 1 ? 2 : 1;
        }
        StateHasChanged();
    }

    private void CheckForWinner()
    {
        for (int i = 0; i < 3; i++)
        {
            if (!string.IsNullOrEmpty(gameBoard[i][0]) &&
                gameBoard[i][0] == gameBoard[i][1] &&
                gameBoard[i][1] == gameBoard[i][2])
            {
                gameOver = true;
                winner = gameBoard[i][0];
                return;
            }

            if (!string.IsNullOrEmpty(gameBoard[0][i]) &&
                gameBoard[0][i] == gameBoard[1][i] &&
                gameBoard[1][i] == gameBoard[2][i])
            {
                gameOver = true;
                winner = gameBoard[0][i];
                return;
            }
        }

        if (!string.IsNullOrEmpty(gameBoard[0][0]) &&
            gameBoard[0][0] == gameBoard[1][1] &&
            gameBoard[1][1] == gameBoard[2][2])
        {
            gameOver = true;
            winner = gameBoard[0][0];
            return;
        }

        if (!string.IsNullOrEmpty(gameBoard[0][2]) &&
            gameBoard[0][2] == gameBoard[1][1] &&
            gameBoard[1][1] == gameBoard[2][0])
        {
            gameOver = true;
            winner = gameBoard[0][2];
            return;
        }

        bool isDraw = true;
        for (int r = 0; r < 3; r++)
            for (int c = 0; c < 3; c++)
                if (string.IsNullOrEmpty(gameBoard[r][c]))
                    isDraw = false;

        if (isDraw)
        {
            gameOver = true;
            winner = "Draw";
        }
    }
}
