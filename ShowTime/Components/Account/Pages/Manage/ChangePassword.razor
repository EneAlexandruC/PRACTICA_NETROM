@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity


@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<div class="change-password-container">
    <h3 class="mb-4" style="color: #4A2C3A; font-weight: 600;">
        <i class="fas fa-key me-2" style="color: #E53E3E;"></i>Change password
    </h3>
    <StatusMessage Message="@message" />
    <div class="row">
        <div class="col-md-8">
            <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <Microsoft.AspNetCore.Components.Forms.ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.OldPassword" class="form-control custom-input" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
                    <label for="old-password" class="form-label">Old password</label>
                    <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.NewPassword" class="form-control custom-input" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                    <label for="new-password" class="form-label">New password</label>
                    <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control custom-input" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
                    <label for="confirm-password" class="form-label">Confirm password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg custom-btn">
                    <i class="fas fa-save me-2"></i>Update password
                </button>
            </EditForm>
        </div>
    </div>
</div>

<style>
    .change-password-container {
        max-width: 600px;
        margin: 0 auto;
    }
    
    .custom-input {
        border: 2px solid #E8E8E8;
        border-radius: 0.5rem;
        padding: 1rem;
        font-size: 1rem;
        transition: all 0.3s ease;
    }
    
    .custom-input:focus {
        border-color: #E53E3E;
        box-shadow: 0 0 0 0.2rem rgba(229, 62, 62, 0.25);
    }
    
    .custom-btn {
        background: linear-gradient(135deg, #E53E3E 0%, #4A2C3A 100%);
        border: none;
        border-radius: 0.5rem;
        color: white;
        font-weight: 600;
        padding: 1rem 2rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(229, 62, 62, 0.3);
    }
    
    .custom-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(229, 62, 62, 0.4);
        background: linear-gradient(135deg, #c53333 0%, #3a1f2a 100%);
    }
    
    .form-floating > label {
        color: #6c757d;
        font-weight: 500;
    }
    
    .form-floating > .custom-input:focus ~ label,
    .form-floating > .custom-input:not(:placeholder-shown) ~ label {
        color: #E53E3E;
        font-weight: 600;
    }
</style>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
