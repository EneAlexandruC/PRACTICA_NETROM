@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ShowTime.Components.Account.Shared
@using ShowTime.Entities

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage email</PageTitle>

<div class="email-container">
    <h3 class="mb-4" style="color: #4A2C3A; font-weight: 600;">
        <i class="fas fa-envelope me-2" style="color: #E53E3E;"></i>Manage email
    </h3>

    <StatusMessage Message="@message"/>
    <div class="row">
        <div class="col-md-8">
            <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <Microsoft.AspNetCore.Components.Forms.ValidationSummary class="text-danger" role="alert" />
                @if (isEmailConfirmed)
                {
                    <div class="form-floating mb-3 input-group">
                        <input type="text" value="@email" class="form-control custom-input" placeholder="Please enter your email." disabled />
                        <div class="input-group-append">
                            <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
                        </div>
                        <label for="email" class="form-label">Email</label>
                    </div>
                }
                else
                {
                    <div class="form-floating mb-3">
                        <input type="text" value="@email" class="form-control custom-input" placeholder="Please enter your email." disabled />
                        <label for="email" class="form-label">Email</label>
                        <button type="submit" class="btn btn-link verification-btn" form="send-verification-form">Send verification email</button>
                    </div>
                }
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.NewEmail" class="form-control custom-input" autocomplete="email" aria-required="true" placeholder="Please enter new email." />
                    <label for="new-email" class="form-label">New email</label>
                    <ValidationMessage For="() => Input.NewEmail" class="text-danger" />
                </div>
                <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
                    <AntiforgeryToken />
                </form>
                <button type="submit" class="w-100 btn btn-lg custom-btn">
                    <i class="fas fa-save me-2"></i>Change email
                </button>
            </EditForm>
        </div>
    </div>
</div>

<style>
    .email-container {
        max-width: 600px;
        margin: 0 auto;
    }
    
    .custom-input {
        border: 2px solid #E8E8E8;
        border-radius: 0.5rem;
        padding: 1rem;
        font-size: 1rem;
        transition: all 0.3s ease;
    }
    
    .custom-input:focus {
        border-color: #E53E3E;
        box-shadow: 0 0 0 0.2rem rgba(229, 62, 62, 0.25);
    }
    
    .custom-input:disabled {
        background-color: #f8f9fa;
        opacity: 0.7;
    }
    
    .custom-btn {
        background: linear-gradient(135deg, #E53E3E 0%, #4A2C3A 100%);
        border: none;
        border-radius: 0.5rem;
        color: white;
        font-weight: 600;
        padding: 1rem 2rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(229, 62, 62, 0.3);
    }
    
    .custom-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(229, 62, 62, 0.4);
        background: linear-gradient(135deg, #c53333 0%, #3a1f2a 100%);
    }
    
    .verification-btn {
        color: #E53E3E;
        font-weight: 600;
        text-decoration: none;
        padding: 0.5rem 0.5rem;
        margin-top: 0.5rem;
        transition: all 0.3s ease;
    }
    
    .verification-btn:hover {
        color: #c53333;
        /* text-decoration: underline; */
    }
    
    .form-floating > label {
        color: #6c757d;
        font-weight: 500;
    }
    
    .form-floating > .custom-input:focus ~ label,
    .form-floating > .custom-input:not(:placeholder-shown) ~ label {
        color: #E53E3E;
        font-weight: 600;
    }
</style>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}
