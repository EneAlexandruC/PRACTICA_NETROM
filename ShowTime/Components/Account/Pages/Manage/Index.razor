@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using ShowTime.Components.Account.Shared
@using ShowTime.Entities

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<div class="profile-container">
    <h3 class="mb-4" style="color: #4A2C3A; font-weight: 600;">
        <i class="fas fa-user me-2" style="color: #E53E3E;"></i>Profile
    </h3>
    <StatusMessage />

    <div class="row">
        <div class="col-md-8">
            <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <Microsoft.AspNetCore.Components.Forms.ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <input type="text" value="@username" class="form-control custom-input" placeholder="Please choose your username." disabled />
                    <label for="username" class="form-label">Username</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.PhoneNumber" class="form-control custom-input" placeholder="Please enter your phone number." />
                    <label for="phone-number" class="form-label">Phone number</label>
                    <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg custom-btn">
                    <i class="fas fa-save me-2"></i>Save
                </button>
            </EditForm>
        </div>
    </div>
</div>

<style>
    .profile-container {
        max-width: 600px;
        margin: 0 auto;
    }
    
    .custom-input {
        border: 2px solid #E8E8E8;
        border-radius: 0.5rem;
        padding: 1rem;
        font-size: 1rem;
        transition: all 0.3s ease;
    }
    
    .custom-input:focus {
        border-color: #E53E3E;
        box-shadow: 0 0 0 0.2rem rgba(229, 62, 62, 0.25);
    }
    
    .custom-input:disabled {
        background-color: #f8f9fa;
        opacity: 0.7;
    }
    
    .custom-btn {
        background: linear-gradient(135deg, #E53E3E 0%, #4A2C3A 100%);
        border: none;
        border-radius: 0.5rem;
        color: white;
        font-weight: 600;
        padding: 1rem 2rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(229, 62, 62, 0.3);
    }
    
    .custom-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(229, 62, 62, 0.4);
        background: linear-gradient(135deg, #c53333 0%, #3a1f2a 100%);
    }
    
    .form-floating > label {
        color: #6c757d;
        font-weight: 500;
    }
    
    .form-floating > .custom-input:focus ~ label,
    .form-floating > .custom-input:not(:placeholder-shown) ~ label {
        color: #E53E3E;
        font-weight: 600;
    }
</style>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
