@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ShowTime.Components.Account.Shared
@using ShowTime.Entities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<div class="auth-container">
    <div class="page-header fade-in">
        <h1 class="display-4 fw-bold mb-3" style="color: #FEFDF9; text-shadow: 0 4px 8px rgba(0,0,0,0.3);">
            <i class="fas fa-user-plus me-3" style="color: #E53E3E;"></i>Join ShowTime
        </h1>
        <p class="lead" style="color: #F5F5DC; opacity: 0.9;">Create your account to start booking amazing festivals</p>
    </div>
    
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-5">
                <div class="auth-card">
                    <StatusMessage Message="@Message" />
                    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                        <DataAnnotationsValidator />
                        <h2 class="auth-title">
                            <i class="fas fa-user-circle me-2"></i>Create Account
                        </h2>
                        <hr class="auth-divider" />
                        <Microsoft.AspNetCore.Components.Forms.ValidationSummary class="text-danger" role="alert" />
                        
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.Email" class="form-control auth-input" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            <label for="email">Email</label>
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>
                        
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.Password" class="form-control auth-input" autocomplete="new-password" aria-required="true" placeholder="password" />
                            <label for="password">Password</label>
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                        
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control auth-input" autocomplete="new-password" aria-required="true" placeholder="password" />
                            <label for="confirm-password">Confirm Password</label>
                            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                        </div>
                        
                        <button type="submit" class="w-100 btn btn-lg auth-btn-primary">
                            <i class="fas fa-user-plus me-2"></i>Create Account
                        </button>
                        
                        <div class="auth-links">
                            <p>
                                <a href="Account/Login" class="auth-link">
                                    <i class="fas fa-sign-in-alt me-1"></i>Already have an account? Sign in
                                </a>
                            </p>
                        </div>
                    </EditForm>
                </div>
            </div>
            <div class="col-md-6 col-lg-5">
                <div class="auth-card">
                    <h3 class="auth-title">
                        <i class="fas fa-external-link-alt me-2"></i>External Registration
                    </h3>
                    <hr class="auth-divider" />
                    <ExternalLoginPicker />
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .auth-container {
        background: linear-gradient(135deg, #cb259c 0%, #3f0a41 100%);
        min-height: 100vh;
        padding-top: 76px;
    }
    
    .page-header {
        text-align: center;
        padding: 3rem 0;
        background: linear-gradient(135deg, rgba(0,0,0,0.3) 0%, rgba(0,0,0,0.1) 100%);
        backdrop-filter: blur(10px);
        margin-bottom: 2rem;
    }
    
    .auth-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 1rem;
        padding: 2rem;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        margin-bottom: 2rem;
    }
    
    .auth-title {
        color: #4A2C3A;
        font-weight: 600;
        text-align: center;
        margin-bottom: 1rem;
    }
    
    .auth-divider {
        border-color: rgba(229, 62, 62, 0.3);
        margin: 1.5rem 0;
    }
    
    .auth-input {
        border: 2px solid rgba(74, 44, 58, 0.2);
        border-radius: 0.5rem;
        transition: all 0.3s ease;
    }
    
    .auth-input:focus {
        border-color: #E53E3E;
        box-shadow: 0 0 0 0.2rem rgba(229, 62, 62, 0.25);
    }
    
    .auth-btn-primary {
        background: linear-gradient(135deg, #E53E3E 0%, #4A2C3A 100%);
        border: none;
        border-radius: 0.5rem;
        color: white;
        font-weight: 600;
        padding: 0.75rem 1.5rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(229, 62, 62, 0.3);
    }
    
    .auth-btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(229, 62, 62, 0.4);
        background: linear-gradient(135deg, #4A2C3A 0%, #E53E3E 100%);
    }
    
    .auth-links {
        text-align: center;
        margin-top: 1.5rem;
    }
    
    .auth-links p {
        margin: 0.5rem 0;
    }
    
    .auth-link {
        color: #E53E3E;
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .auth-link:hover {
        color: #4A2C3A;
        text-decoration: underline;
    }
    
    .fade-in {
        animation: fadeIn 0.8s ease-in;
    }
    
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    @@media (max-width: 768px) {
        .auth-container {
            padding-top: 56px;
        }
        
        .container {
            padding: 0 1rem;
        }
        
        .page-header {
            padding: 2rem 1rem;
        }
        
        .auth-card {
            margin-bottom: 1rem;
        }
    }
</style>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
